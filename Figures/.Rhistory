df = NULL # initialize a dataframe
dfalt = NULL # initialize a dataframe
name = "A"
namealt = "B"
for (t in 1:150) # do for this many periods
{
gky <- s*(1/kycurr)^(1-alpha) - delta  #(1-alpha)*(s/kycurr - delta - ga - gl) # calculate growth in k given current k/al
df = rbind(df, data.frame(t,kycurr,gky,name)) # add to dataframe
kycurr <- (1+gky-ga-gl)*(kycurr)# update current k/y for next period
gky <- s*(1/kyalt)^(1-alpha) - delta #(1-alpha)*(s/kyalt - delta - ga - gl)
dfalt = rbind(dfalt, data.frame(t,kyalt,gky,namealt)) # add to dataframe
kyalt <- (1+gky-ga-gl)*(kyalt)
}
colnames(dfalt) <- c("t","kycurr","gky","name")
dfgraph = rbind(df,dfalt)
# Initialize theoretical relationship
fig <- plot_ly(dfgraph,
x = ~kycurr,
y = ~gky,
color = ~name,
frame = ~t,
text = ~t,
hoverinfo = "text",
type = 'scatter',
mode = 'markers',
marker = list(size = 15)
)
fig <- fig %>% animation_slider(
hide = T
)
fig <- fig %>% animation_button(
x = 1, xanchor = "right", y = 0.4, yanchor = "bottom"
)
fig <- layout(fig, title = list(text = 'Dynamics of capital growth', x=0),
xaxis = list(title = 'K/AL ratio', range=c(0,6),dtick=.5),
yaxis = list (title = 'Growth rate of K', range=c(-.1,0.30),dtick=.01
)
)
api_create(fig, filename = "me-gky-dynamics")
df = NULL
# Fixed parameters
s <- .2
ga <- .02
gl <- .01
delta <- .05
alpha <- .3
# Initialize dynamic process
kycurr <- 2 # initial capital stock
kyalt <- 5 # initial capital stock
df = NULL # initialize a dataframe
dfalt = NULL # initialize a dataframe
name = "A"
namealt = "B"
for (t in 1:150) # do for this many periods
{
gky <- s*(1/kycurr)^(1-alpha) - delta  #(1-alpha)*(s/kycurr - delta - ga - gl) # calculate growth in k given current k/al
df = rbind(df, data.frame(t,kycurr,gky,name)) # add to dataframe
kycurr <- (1+gky-ga-gl)*(kycurr)# update current k/y for next period
gky <- s*(1/kyalt)^(1-alpha) - delta #(1-alpha)*(s/kyalt - delta - ga - gl)
dfalt = rbind(dfalt, data.frame(t,kyalt,gky,namealt)) # add to dataframe
kyalt <- (1+gky-ga-gl)*(kyalt)
}
colnames(dfalt) <- c("t","kycurr","gky","name")
dfgraph = rbind(df,dfalt)
# Initialize theoretical relationship
fig <- plot_ly(dfgraph,
x = ~kycurr,
y = ~gky,
color = ~name,
frame = ~t,
text = ~t,
hoverinfo = "text",
type = 'scatter',
mode = 'markers',
marker = list(size = 15)
)
fig <- fig %>% animation_slider(
hide = T
)
fig <- fig %>% animation_button(
x = 1, xanchor = "right", y = 0.4, yanchor = "bottom"
)
fig <- layout(fig, title = list(text = 'Dynamics of capital growth', x=0),
xaxis = list(title = 'K/AL ratio', range=c(0,5.5),dtick=.5),
yaxis = list (title = 'Growth rate of K', range=c(-.1,0.30),dtick=.01
)
)
api_create(fig, filename = "me-gky-dynamics")
df = NULL
# Fixed parameters
s <- .2
ga <- .02
gl <- .01
delta <- .05
alpha <- .3
# Initialize dynamic process
kycurr <- 2 # initial capital stock
kyalt <- 5 # initial capital stock
df = NULL # initialize a dataframe
dfalt = NULL # initialize a dataframe
name = "A"
namealt = "B"
for (t in 1:150) # do for this many periods
{
gky <- s*(1/kycurr)^(1-alpha) - delta  #(1-alpha)*(s/kycurr - delta - ga - gl) # calculate growth in k given current k/al
df = rbind(df, data.frame(t,kycurr,gky,name)) # add to dataframe
kycurr <- (1+gky-ga-gl)*(kycurr)# update current k/y for next period
gky <- s*(1/kyalt)^(1-alpha) - delta #(1-alpha)*(s/kyalt - delta - ga - gl)
dfalt = rbind(dfalt, data.frame(t,kyalt,gky,namealt)) # add to dataframe
kyalt <- (1+gky-ga-gl)*(kyalt)
}
colnames(dfalt) <- c("t","kycurr","gky","name")
dfgraph = rbind(df,dfalt)
# Initialize theoretical relationship
fig <- plot_ly(dfgraph,
x = ~kycurr,
y = ~gky,
color = ~name,
frame = ~t,
text = ~t,
hoverinfo = "text",
type = 'scatter',
mode = 'markers',
marker = list(size = 15)
)
fig <- fig %>% animation_slider(
hide = T
)
fig <- fig %>% animation_button(
x = 1, xanchor = "right", y = 0.4, yanchor = "bottom"
)
fig <- layout(fig, title = list(text = 'Dynamics of capital growth', x=0),
xaxis = list(title = 'K/AL ratio', range=c(0,5.5),dtick=.5),
yaxis = list (title = 'Growth rate of K', range=c(-.1,0.1),dtick=.01
)
)
api_create(fig, filename = "me-gky-dynamics")
df = NULL
# Fixed parameters
s <- .2
ga <- .02
gl <- .01
delta <- .05
alpha <- .3
# Initialize dynamic process
kycurr <- 2 # initial capital stock
kyalt <- 5 # initial capital stock
df = NULL # initialize a dataframe
dfalt = NULL # initialize a dataframe
name = "A"
namealt = "B"
for (t in 1:150) # do for this many periods
{
gky <- s*(1/kycurr)^(1-alpha) - delta  #(1-alpha)*(s/kycurr - delta - ga - gl) # calculate growth in k given current k/al
df = rbind(df, data.frame(t,kycurr,gky,name)) # add to dataframe
kycurr <- (1+gky-ga-gl)*(kycurr)# update current k/y for next period
gky <- s*(1/kyalt)^(1-alpha) - delta #(1-alpha)*(s/kyalt - delta - ga - gl)
dfalt = rbind(dfalt, data.frame(t,kyalt,gky,namealt)) # add to dataframe
kyalt <- (1+gky-ga-gl)*(kyalt)
}
colnames(dfalt) <- c("t","kycurr","gky","name")
dfgraph = rbind(df,dfalt)
# Initialize theoretical relationship
fig <- plot_ly(dfgraph,
x = ~kycurr,
y = ~gky,
color = ~name,
frame = ~t,
text = ~t,
hoverinfo = "text",
type = 'scatter',
mode = 'markers',
marker = list(size = 15)
)
fig <- fig %>% animation_slider(
hide = T
)
fig <- fig %>% animation_button(
x = 1, xanchor = "right", y = 0.4, yanchor = "bottom"
)
fig <- layout(fig, title = list(text = 'Dynamics of capital growth', x=0),
xaxis = list(title = 'K/AL ratio', range=c(0,5.5),dtick=.5),
yaxis = list (title = 'Growth rate of K', range=c(-.1,0.1),dtick=.01
)
)
api_create(fig, filename = "me-gky-dynamics")
df = NULL
# Fixed parameters
s <- .2
ga <- .02
gl <- .01
delta <- .05
alpha <- .3
# Initialize dynamic process
kycurr <- 2 # initial capital stock
kyalt <- 5 # initial capital stock
df = NULL # initialize a dataframe
dfalt = NULL # initialize a dataframe
name = "A"
namealt = "B"
for (t in 1:150) # do for this many periods
{
gky <- s*(1/kycurr)^(1-alpha) - delta  #(1-alpha)*(s/kycurr - delta - ga - gl) # calculate growth in k given current k/al
df = rbind(df, data.frame(t,kycurr,gky,name)) # add to dataframe
kycurr <- (1+gky-ga-gl)*(kycurr)# update current k/y for next period
gky <- s*(1/kyalt)^(1-alpha) - delta #(1-alpha)*(s/kyalt - delta - ga - gl)
dfalt = rbind(dfalt, data.frame(t,kyalt,gky,namealt)) # add to dataframe
kyalt <- (1+gky-ga-gl)*(kyalt)
}
colnames(dfalt) <- c("t","kycurr","gky","name")
dfgraph = rbind(df,dfalt)
# Initialize theoretical relationship
fig <- plot_ly(dfgraph,
x = ~kycurr,
y = ~gky,
color = ~name,
frame = ~t,
text = ~t,
hoverinfo = "text",
type = 'scatter',
mode = 'markers',
marker = list(size = 15)
)
fig <- fig %>% animation_slider(
hide = T
)
fig <- fig %>% animation_button(
x = 1, xanchor = "right", y = 0.4, yanchor = "bottom"
)
fig <- layout(fig, title = list(text = 'Dynamics of capital growth', x=0),
xaxis = list(title = 'K/AL ratio', range=c(1.5,5.5),dtick=.5),
yaxis = list (title = 'Growth rate of K', range=c(0,0.1),dtick=.01
)
)
api_create(fig, filename = "me-gky-dynamics")
## Create evolving frames for graphing changes in growth rate
df = NULL
for (t in 1:30)
{
kycurr <- 2^(1-alpha)
kyalt <- 5^(1-alpha)
kybgp <- 2.5
dftemp = NULL
dfalt = NULL
dfbgp = NULL
for (k in 1:t) # do for this many periods
{
name <- "A"
ky <- kycurr
gky <- (1-alpha)*(s/ky - delta - ga - gl) # calculate growth in k/y given current k/y
dftemp = rbind(dftemp, data.frame(t,k,ky,gky,name)) # add to dataframe
kycurr <- (1+gky)*(ky) # update current k/y for next period
name <- "B"
ky <- kyalt
gky <- (1-alpha)*(s/ky - delta - ga - gl)
dfalt = rbind(dfalt, data.frame(t,k,ky,gky,name)) # add to dataframe
kyalt <- (1+gky)*(ky) # update current k/y for next period
name <- "BGP"
ky <- kybgp
gky <- (1-alpha)*(s/ky - delta - ga - gl)
dfalt = rbind(dfalt, data.frame(t,k,ky,gky,name)) # add to dataframe
kybgp <- (1+gky)*(ky) # update current k/y for next period
}
df = rbind(df,dftemp)
df = rbind(df,dfalt)
df = rbind(df,dfbgp)
}
df$lny <- (alpha/(1-alpha))*log(df$ky) + 4 + df$k*ga
df$gy <- ga + (alpha/(1-alpha))*df$gky
df <-df[order(df$name, df$t, df$k),]
fig <- plot_ly(df,
x = ~k,
y = ~lny,
frame = ~t,
color = ~name,
hoverinfo = "text",
type = 'scatter',
mode = 'lines'
)
fig <- fig %>% animation_slider(
hide = T
)
fig <- fig %>% animation_button(
x = 1, xanchor = "right", y = 0.4, yanchor = "bottom"
)
fig <- layout(fig, title = list(text = 'Level of GDP per capita over time', x=0),
xaxis = list(title = 'Time', range=c(0,30),dtick=5),
yaxis = list (title = 'Log GDP per capita', range=c(3,6)
)
)
fig
fig <- plot_ly(df,
x = ~k,
y = ~lny,
frame = ~t,
color = ~name,
hoverinfo = "text",
type = 'scatter',
mode = 'lines'
)
fig <- fig %>% animation_slider(
hide = T
)
fig <- fig %>% animation_button(
x = 1, xanchor = "right", y = 0.4, yanchor = "bottom"
)
fig <- layout(fig, title = list(text = 'Level of GDP per capita over time', x=0),
xaxis = list(title = 'Time', range=c(0,30),dtick=5),
yaxis = list (title = 'Log GDP per capita', range=c(4,5)
)
)
fig
fig <- plot_ly(df,
x = ~k,
y = ~gy,
frame = ~t,
color = ~name,
hoverinfo = "text",
type = 'scatter',
mode = 'lines'
)
fig <- fig %>% animation_slider(
hide = T
)
fig <- fig %>% animation_button(
x = 1, xanchor = "right", y = 0.4, yanchor = "bottom"
)
fig <- layout(fig, title = list(text = 'Growth rate of GDP per capita over time', x=0),
xaxis = list(title = 'Time', range=c(0,30),dtick=5),
yaxis = list (title = 'Growth rate of GDP per capita', range=c(0,.15)
)
)
fig
fig <- plot_ly(df,
x = ~k,
y = ~gy,
frame = ~t,
color = ~name,
hoverinfo = "text",
type = 'scatter',
mode = 'lines'
)
fig <- fig %>% animation_slider(
hide = T
)
fig <- fig %>% animation_button(
x = 1, xanchor = "right", y = 0.4, yanchor = "bottom"
)
fig <- layout(fig, title = list(text = 'Growth rate of GDP per capita over time', x=0),
xaxis = list(title = 'Time', range=c(0,30),dtick=5),
yaxis = list (title = 'Growth rate of GDP per capita', range=c(0,.05)
)
)
fig
fig <- fig %>% animation_slider(
hide = T
)
fig <- plot_ly(df,
x = ~k,
y = ~lny,
frame = ~t,
color = ~name,
hoverinfo = "text",
type = 'scatter',
mode = 'lines'
)
fig <- fig %>% animation_slider(
hide = T
)
fig <- fig %>% animation_button(
x = 1, xanchor = "right", y = 0.4, yanchor = "bottom"
)
fig <- layout(fig, title = list(text = 'Level of GDP per capita over time', x=0),
xaxis = list(title = 'Time', range=c(0,30),dtick=5),
yaxis = list (title = 'Log GDP per capita', range=c(4,5)
)
)
fig
shiny::runApp('Dropbox/Project/StudyGuide/code/TestBasic')
runApp('Dropbox/Project/StudyGuide/code/TestBasic')
runApp('Dropbox/Project/StudyGuide/code/SolowBasic')
runApp('Dropbox/Project/StudyGuide/code/SolowBasic')
View(dfgraph)
View(df)
View(df)
runApp('Dropbox/Project/StudyGuide/code/SolowBasic')
runApp('Dropbox/Project/StudyGuide/code/SolowBasic')
View(df)
runApp('Dropbox/Project/StudyGuide/code/SolowBasic')
View(df)
rm(df)
runApp('Dropbox/Project/StudyGuide/code/SolowBasic')
runApp('Dropbox/Project/StudyGuide/code/SolowBasic')
runApp('Dropbox/Project/StudyGuide/code/SolowBasic')
runApp('Dropbox/Project/StudyGuide/code/SolowBasic')
runApp('Dropbox/Project/StudyGuide/code/SolowBasic')
runApp('Dropbox/Project/StudyGuide/code/TestBasic')
runApp('Dropbox/Project/StudyGuide/code/SolowBasic')
runApp('Dropbox/Project/StudyGuide/code/SolowBasic')
runApp('Dropbox/Project/StudyGuide/code/SolowBasic')
runApp('Dropbox/Project/StudyGuide/code/SolowBasic')
runApp('Dropbox/Project/StudyGuide/code/SolowBasic')
runApp('Dropbox/Project/StudyGuide/code/SolowBasic')
runApp('Dropbox/Project/StudyGuide/code/SolowBasic')
runApp('Dropbox/Project/StudyGuide/code/SolowBasic')
runApp('Dropbox/Project/StudyGuide/code/SolowBasic')
runApp('Dropbox/Project/StudyGuide/code/SolowBasic')
runApp('Dropbox/Project/StudyGuide/code/SolowBasic')
runApp('Dropbox/Project/StudyGuide/code/JustKAL')
runApp('Dropbox/Project/StudyGuide/code/JustKAL')
runApp('Dropbox/Project/StudyGuide/code/JustKAL')
runApp('Dropbox/Project/StudyGuide/code/JustKAL')
runApp('Dropbox/Project/StudyGuide/code/JustKAL')
runApp('Dropbox/Project/StudyGuide/code/JustKAL')
runApp('Dropbox/Project/StudyGuide/code/JustKAL')
runApp('Dropbox/Project/StudyGuide/code/JustKAL')
runApp('Dropbox/Project/StudyGuide/code/JustKAL')
runApp('Dropbox/Project/StudyGuide/code/JustKAL')
runApp('Dropbox/Project/StudyGuide/code/JustKAL')
runApp('Dropbox/Project/StudyGuide/code/JustKAL')
runApp('Dropbox/Project/StudyGuide/code/JustKAL')
runApp('Dropbox/Project/StudyGuide/code/JustLevel')
runApp()
runApp()
runApp()
runApp('Dropbox/Project/StudyGuide/code/JustLevel')
runApp('Dropbox/Project/StudyGuide/code/JustLevel')
runApp('Dropbox/Project/StudyGuide/code/JustRA')
runApp('Dropbox/Project/StudyGuide/code/JustRA')
runApp('Dropbox/Project/StudyGuide/code/JustRA')
runApp('Dropbox/Project/StudyGuide/code/JustRA')
runApp('Dropbox/Project/StudyGuide/code/JustRA')
runApp('Dropbox/Project/StudyGuide/code/JustRA')
runApp('Dropbox/Project/StudyGuide/code/JustRA')
## Set up and plot hypothetical paths of GDP per capita
## Set up scenarios
# Each scenario has ID, alpha, sI, gL, gA, delta, KY0, A0
scenario <- c('A','B','C','D','E')
alpha <- c(.3,.3,.3,.3,.3)
sI <- c(.2,.2,.2,.1,.4)
gL <- c(.01,.01,.01,.01,.01)
gA <- c(.02,.02,.02,.02,.02)
delta <- c(.05,.05,.05,.05,.05)
KY0 <- c(2.5,1.5,4,2.5,2.5)
A0 <- c(10,10,10,10,10)
label <- c('C','B','D','E','A') # allows different label for test purposes
# Year vector gives total periods to run over
year <- c(0:40)
s <- 0 # initializes Solow vector
all_scenario <- data.frame(scenario,alpha,sI,gL,gA,delta,KY0,A0) # combine scenario parameters
View(all_scenario)
year_scenario <- expand.grid(year,scenario) # create year/scenario combinations
View(year_scenario)
names(year_scenario) <- c("year","scenario")
s <- merge(year_scenario,all_scenario,by="scenario") # add parameters to year/scenario combos
View(s)
View(s)
library(shiny); runApp('Dropbox/Project/Regional/shinymap.R')
install.packages("spData")
runApp('Dropbox/Project/Regional/shinymap.R')
runApp('Dropbox/Project/Regional/shinymap.R')
shiny::runApp('Dropbox/Project/StudyGuide/code/SolowBasic')
solow()
solow <- function(alpha = .3, si = .2, delta = .05, ga = .02, gl = .01, k0=1, a0=1, l0=1, t=1){
ky_init <- (k0/(a0*l0))**(1-alpha) # initial K/Y ratio
ky_ss   <- si/(delta+ga+gl) # steady state K/Y ratio
conv_term <- (1-alpha)*(delta+ga+gl) # convergence speed
ky_time <- ky_ss*(1-exp(-1*conv_term)*t) + ky_init*(exp(-1*conv_term*t)) # K/Y by period
kal_time <- ky_time**(1/(1-alpha)) # K/AL by period
lny_time <- (alpha/(1-alpha))*ky_time + log(a0) + ga*t # log GDP per capita
gK_time <- si/ky_time - delta # growth rate of K by period
gy_time <- (1-alpha)*(gK - ga - gl) + ga # growth rate of y by period
return(list(ky0 = ky_init,
kyss = ky_ss,
output = data.frame(time = t, kalt = kal_time, kyt = ky_time,
lny = lny_time, gKt = gK_time, gyt = gy_time)
))
}
solow()
source('~/Dropbox/Project/Growth4ed/Code/solow.r')
source('~/Dropbox/Project/Growth4ed/Code/solow.r')
View(s)
source('~/Dropbox/Project/Growth4ed/Code/solow.r')
View(s)
source('~/Dropbox/Project/Growth4ed/Code/solow.r')
View(s)
source('~/Dropbox/Project/Growth4ed/Code/solow.r')
source('~/Dropbox/Project/Growth4ed/Code/solow.r')
View(s)
source('~/Dropbox/Project/Growth4ed/Code/solow.r')
source('~/Dropbox/Project/Growth4ed/Code/solow.r')
source('~/Dropbox/Project/Growth4ed/Code/solow.r')
View(s)
source('~/Dropbox/Project/Growth4ed/Code/solow.r')
source('~/Dropbox/Project/Growth4ed/Code/solow.r')
source('~/Dropbox/Project/Growth4ed/Code/solow.r')
source('~/Dropbox/Project/Growth4ed/Code/solow.r')
source('~/Dropbox/Project/Growth4ed/Code/solow.r')
source('~/Dropbox/Project/Growth4ed/Code/solow.r')
source('~/Dropbox/Project/Growth4ed/Code/solow.r')
source('~/Dropbox/Project/Growth4ed/Code/solow.r')
source('~/Dropbox/Project/Growth4ed/Code/solow.r')
source('~/Dropbox/Project/Growth4ed/Code/solow.r')
source('~/Dropbox/Project/Growth4ed/Code/solow.r')
fig
fig <- plot_ly(s, x = ~time, y = ~gy, type = 'scatter', mode = 'lines')
#fig <- add_trace(fig, x = ~tie, y = ~gK, type = 'scatter', mode = 'lines')
fig <- layout(fig, title = list(text = 'log GDP per capita', x=0),
xaxis = list(title = 'Year'),
yaxis = list (title = 'Log of GDP per capita'),
hovermode="x unified")
fig
